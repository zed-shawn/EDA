000001 //PRIMFORW JOB (FORTRAN),                                               
000002 //             'Eratosthenes Sieve',                                    
000003 //             CLASS=A,                                                 
000004 //             MSGCLASS=A,                                              
000005 //             REGION=9000K,TIME=1440,                                  
000006 //             MSGLEVEL=(1,1)                                           
000007 //********************************************************************  
000008 //*                                                                     
000009 //* Name: SYS2.JCLLIB(PRIMFORW)                                         
000010 //*                                                                     
000011 //* Desc: Sieve of Eratosthenes programmed in FORTRAN,                  
000012 //*       compiled using the Waterloo University WATFIV V1L5 compiler.  
000013 //*       All prime numbers up to the value entered after               
000014 //*       $ENTRY are computed.                                          
000015 //*                                                                     
000016 //********************************************************************  
000017 //PRIMES   EXEC WATFIV                                                  
000018 //GO.FT09F001 DD SYSOUT=*,DCB=(RECFM=FBA,LRECL=166,BLKSIZE=16600)       
000019 //SYSIN       DD *                                                      
000020 $JOB           ERATOSTHENES,TIME=(1440),NOCHECK                         
000021 C /*-----------------------------------------------------------------*/ 
000022 C /*   Sieve of Eratosthenes.                                        */ 
000023 C /*-----------------------------------------------------------------*/ 
000024 C                                                                       
000025 C /*-----------------------------------------------------------------*/ 
000026 C /*   Formats for output.                                           */ 
000027 C /*-----------------------------------------------------------------*/ 
000028 3     FORMAT (' ')                                                      
000029 4     FORMAT (  3X, I7, 1X, I7, 1X, I7, 1X, I7, 1X, I7, 1X, I7, 1X, I7, 
000030      11X, I7, 1X, I7, 1X, I7, 1X, I7, 1X, I7, 1X, I7, 1X, I7, 1X, I7, 1X
000031      1, I7, 1X, I7, 1X, I7)                                             
000032 5     FORMAT (' Sieve of Eratosthenes generated using Waterloo WATFIV V1
000033      1L5')                                                              
000034 6     FORMAT (' Upper limit of test range = ', I12)                     
000035 7     FORMAT (' Number of primes in range = ', I12)                     
000036 8     FORMAT (I7)                                                       
000037 993   FORMAT (' DEBUG: marking as non prime: ', I4)                     
000038 994   FORMAT (' DEBUG: starting p=', I4, '    j=', I4)                  
000039 C                                                                       
000040 C /*-----------------------------------------------------------------*/ 
000041 C /*   Define array of flags, one for each integer in the range      */
000042 C /*   we will test.  If the flag is on, the corresponding           */
000043 C /*   number is prime.  If it's off, the number is not prime.       */
000044 C /*   We will initialize all the flags to on (assuming every        */
000045 C /*   number is prime) and turn them off as we determine the        */
000046 C /*   corresponding number is not prime.                            */
000047 C /*-----------------------------------------------------------------*/
000048       LOGICAL*1 FLAGS(5000002)                                         
000049 C                                                                      
000050 C /*-----------------------------------------------------------------*/
000051 C /*   The PRIME array will hold all the prime numbers we have       */
000052 C /*   identified, and CPRIME will contain the number of primes      */
000053 C /*   we've found.                                                  */
000054 C /*-----------------------------------------------------------------*/
000055       INTEGER*4 PRIME(350000)                                          
000056       INTEGER*4 CPRIME                                                 
000057 C                                                                      
000058 C /*-----------------------------------------------------------------*/
000059 C /*   J is a loop counter and work variable.                        */
000060 C /*-----------------------------------------------------------------*/
000061       INTEGER*4 J                                                      
000062 C                                                                      
000063 C /*-----------------------------------------------------------------*/
000064 C /*   K is the step amount for crossing out prime multiples         */
000065 C /*-----------------------------------------------------------------*/
000066       INTEGER*4 K                                                      
000067 C                                                                      
000068 C /*-----------------------------------------------------------------*/
000069 C /*   P is the number that we've most recently determined           */
000070 C /*   definitely to be prime.                                       */
000071 C /*-----------------------------------------------------------------*/
000072       INTEGER*4 P                                                      
000073 C                                                                      
000074 C /*-----------------------------------------------------------------*/
000075 C /*   The DEBUG flag is set to TRUE if debugging messages are to    */
000076 C /*   be issued and FALSE otherwise.                                */
000077 C /*-----------------------------------------------------------------*/
000078       LOGICAL*1 DEBUG                                                  
000079 C                                                                      
000080 C /*-----------------------------------------------------------------*/
000081 C /*   LIMIT sets the upper bound of the range of numbers we         */
000082 C /*   will test.                                                    */ 
000083 C /*-----------------------------------------------------------------*/ 
000084       INTEGER*4 LIMIT                                                   
000085 C                                                                       
000086 C /*-----------------------------------------------------------------*/ 
000087 C /*   REPEAT is the number of times that the entire prime           */ 
000088 C /*   generation process is to be repeated, and is useful           */ 
000089 C /*   for benchmarking (otherwise it should be 1).                  */ 
000090 C /*-----------------------------------------------------------------*/ 
000091       INTEGER*4 REPEAT                                                  
000092 C                                                                       
000093 C /*-----------------------------------------------------------------*/ 
000094 C /*   Initialize LIMIT, DEBUG and REPEAT.                           */ 
000095 C /*-----------------------------------------------------------------*/ 
000096       READ (5, 8) LIMIT                                                 
000097 C     DEBUG = .TRUE.                                                    
000098       DEBUG = .FALSE.                                                   
000099       REPEAT = 1                                                        
000100 C                                                                       
000101 C *--------------------------------------------------------------*      
000102 C *    THIS IS THE TOP OF THE LOOP FOR BENCHMARK TESTING.               
000103 C *--------------------------------------------------------------*      
000104 100   CONTINUE                                                          
000105       REPEAT = REPEAT - 1                                               
000106       IF (REPEAT .LT. 0) GO TO 999                                      
000107 C                                                                       
000108 C /*-----------------------------------------------------------------*/ 
000109 C /*   Initialize all flags to on.  We optimistically assume         */ 
000110 C /*   all numbers are prime, and will subsequently turn flags       */ 
000111 C /*   off as reality sets in.                                       */ 
000112 C /*-----------------------------------------------------------------*/ 
000113       DO 200 J = 3, LIMIT, 2                                            
000114         FLAGS(J) = .TRUE.                                               
000115 200   CONTINUE                                                          
000116 C                                                                       
000117 C /*-----------------------------------------------------------------*/ 
000118 C /*   The first prime number is 3, the 2 is handled manually        */ 
000119 C /*-----------------------------------------------------------------*/ 
000120       P = 3                                                             
000121 C                                                                       
000122 C  /*-----------------------------------------------------------------*/
000123 C  /*   Start of the main loop.  P is the prime number we're          */
000124 C  /*   currently working on.  If P*P is greater than the limit       */
000125 C  /*   value, we're done (all the numbers between P and the limit    */
000126 C  /*   inclusive have already been marked appropriately).  Any       */
000127 C  /*   non-prime less than P*P has also already been marked          */
000128 C  /*   appropriately, so we will start this pass marking with        */
000129 C  /*   P*P (which we will call J).                                   */
000130 C  /*-----------------------------------------------------------------*/
000131 300   CONTINUE                                                          
000132       J = P * P                                                         
000133       K = 2 * P                                                         
000134       IF (J .GE. LIMIT) GO TO 700                                       
000135         IF (.NOT. DEBUG) GO TO 400                                      
000136           WRITE (9, 994) P, J                                           
000137 C                                                                       
000138 C /*-----------------------------------------------------------------*/ 
000139 C /*   By definition, all multiples of prime number P are not        */ 
000140 C /*   prime.  Turn off the flags for the multiples of P to          */ 
000141 C /*   mark them as non-prime. Note: Even numbers are skipped.       */ 
000142 C /*-----------------------------------------------------------------*/ 
000143 400   CONTINUE                                                          
000144         IF (J .GT. LIMIT) GO TO 500                                     
000145         IF (.NOT. DEBUG) GO TO 420                                      
000146           WRITE (9, 993) J                                              
000147 420     FLAGS(J) = .FALSE.                                              
000148         J = J + K                                                       
000149       GO TO 400                                                         
000150 C                                                                       
000151 C /*-----------------------------------------------------------------*/ 
000152 C /*   Done marking all multiples of J as not prime.  Find the       */ 
000153 C /*   next prime number after J, set it to P and loop back to       */ 
000154 C /*   process it. Note: Even numbers are skipped.                   */ 
000155 C /*-----------------------------------------------------------------*/ 
000156 500   CONTINUE                                                          
000157         P = P + 2                                                       
000158         IF (FLAGS(P)) GO TO 600                                         
000159       GO TO 500                                                         
000160 C                                                                       
000161 C /*-----------------------------------------------------------------*/ 
000162 C /*   Bottom of the main loop.                                      */ 
000163 C /*-----------------------------------------------------------------*/ 
000164 600   CONTINUE                                                          
000165       GO TO 300                                                         
000166 C                                                                       
000167 C /*-----------------------------------------------------------------*/ 
000168 C /*   Bottom of the benchmark loop.                                 */ 
000169 C /*-----------------------------------------------------------------*/ 
000170 700   CONTINUE                                                          
000171       GO TO 100                                                         
000172 999   CONTINUE                                                          
000173 C                                                                       
000174 C /*-----------------------------------------------------------------*/ 
000175 C /*   Set the prime numbers we have found in the PRIME array.       */ 
000176 C /*-----------------------------------------------------------------*/ 
000177       CPRIME = 1                                                        
000178       PRIME(CPRIME) = 2                                                 
000179       DO 800 J = 3, LIMIT, 2                                            
000180         IF (.NOT. FLAGS(J)) GO TO 800                                   
000181           CPRIME = CPRIME + 1                                           
000182           PRIME(CPRIME) = J                                             
000183 800   CONTINUE                                                          
000184 C                                                                       
000185 C /*-----------------------------------------------------------------*/ 
000186 C /*   Display the results.                                          */ 
000187 C /*-----------------------------------------------------------------*/ 
000188       WRITE (9, 3)                                                      
000189       WRITE (9, 5)                                                      
000190       WRITE (9, 6) LIMIT                                                
000191       WRITE (9, 7) CPRIME                                               
000192       WRITE (9, 3)                                                      
000193       WRITE (9, 4) (PRIME(J), J = 1, CPRIME)                            
000194       WRITE (9, 3)                                                      
000195 C                                                                       
000196 C /*-----------------------------------------------------------------*/ 
000197 C /*   End of program.                                               */ 
000198 C /*-----------------------------------------------------------------*/ 
000199       STOP                                                              
000200       END                                                               
000201 $ENTRY                                                                  
000202    2000                                                                 
000203 $STOP                                                                   
000204 /*                                                                      